{"version":3,"file":"static/js/602.dc83357d.chunk.js","mappings":"wNAGaA,EAAOC,EAAAA,EAAAA,GAAH,kDAIJC,EAAOD,EAAAA,EAAAA,GAAH,yFAMJE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,6G,SCgBtB,EAzBmB,SAAC,GAAe,IAAbI,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAMG,KAAI,SAAAC,GAAI,OACb,SAACP,EAAD,WACE,SAACC,EAAD,CAAWO,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAApD,SACGG,EAAKK,SAFCL,EAAKE,GADH,KASpB,C,yIChBYI,EAAad,EAAAA,EAAAA,KAAH,kEAKVe,EAAQf,EAAAA,EAAAA,MAAH,8TAkBLgB,EAAShB,EAAAA,EAAAA,OAAH,wS,SCSnB,EA9Ba,SAAC,GAAsB,IAApBiB,EAAmB,EAAnBA,aACd,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAWA,OACE,UAACN,EAAD,CAAYO,SANO,SAAAC,GACnBA,EAAMC,iBACNN,EAAaE,EAAMK,cACpB,EAGC,WACE,SAACT,EAAD,CACEU,KAAK,OACLC,KAAK,QACLC,WAAS,EACTC,MAAOT,EACPU,SAhBoB,SAAAP,GACxBF,EAASE,EAAMQ,OAAOF,MACvB,KAgBG,SAACZ,EAAD,CAAQS,KAAK,SAAb,SAAsB,aAG3B,E,UCWD,EAjCe,WACb,OAAsCP,EAAAA,EAAAA,UAAS,IAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAA8Bd,EAAAA,EAAAA,WAAS,GAAvC,eAAOe,EAAP,KAAgBC,EAAhB,KACA,GAAwChB,EAAAA,EAAAA,WAAS,GAAjD,eAAOiB,EAAP,KAAqBC,EAArB,KAkBA,OACE,6BACE,SAAC,EAAD,CAAMnB,aAlBW,SAAAoB,GACnBH,GAAW,IAEXI,EAAAA,EAAAA,IAAqBD,GAClBE,MAAK,SAAAC,GACJR,EAAeQ,GACfJ,EAAyC,IAAzBI,EAAcC,OAC/B,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IACAG,SAAQ,WACPZ,GAAW,EACZ,GACJ,IAKID,IAAW,SAACc,EAAA,EAAD,IACXZ,IACC,uBAAG,4DAEJJ,IAAe,SAACiB,EAAA,EAAD,CAAY5C,MAAO2B,MAGxC,C,mMCnCDkB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,mCAIdC,SAAU,QACVC,KAAM,EACNC,eAAe,GAGV,IAAMC,EAAa,mCAAG,oGACJL,EAAAA,EAAAA,IAAA,sBADI,cACrBM,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qDAKbnB,EAAoB,mCAAG,WAAMoB,GAAN,uFACXT,EAAAA,EAAAA,IAAA,6BAAgCS,IADrB,cAC5BH,EAD4B,yBAE3BA,EAASC,KAAKC,SAFa,2CAAH,sDAKpBE,EAAiB,mCAAG,WAAMC,GAAN,uFACRX,EAAAA,EAAAA,IAAA,gBAAmBW,IADX,cACzBL,EADyB,yBAExBA,EAASC,MAFe,2CAAH,sDAKjBK,EAAW,mCAAG,WAAMD,GAAN,uFACFX,EAAAA,EAAAA,IAAA,gBAAmBW,EAAnB,aADE,cACnBL,EADmB,yBAElBA,EAASC,KAAKM,MAFI,2CAAH,sDAKXC,EAAY,mCAAG,WAAMH,GAAN,uFACHX,EAAAA,EAAAA,IAAA,gBAAmBW,EAAnB,aADG,cACpBL,EADoB,yBAEnBA,EAASC,KAAKC,SAFK,2CAAH,qD","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/TmbdApi.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: tomato;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, MovieLink } from './MoviesList.styled';\n\nconst MoviesList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 12px 14px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 10px;\n  border-radius: 4px 8px;\n  outline: none;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 12px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  border-radius: 4px 8px;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchForm, Input, Button } from './Form.styled';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={handleInputChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </SearchForm>\n  );\n};\n\nForm.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import { useState } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Form from 'components/Form/Form';\nimport { fetchSearchByKeyword } from 'services/TmbdApi';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noMoviesText, setNoMoviesText] = useState(false);\n\n  const searchMovies = queryMovie => {\n    setLoading(true);\n\n    fetchSearchByKeyword(queryMovie)\n      .then(searchResults => {\n        setSearchFilms(searchResults);\n        setNoMoviesText(searchResults.length === 0);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <main>\n      <Form searchMovies={searchMovies} />\n      {loading && <Loader />}\n      {noMoviesText && (\n        <p>There is no movies with this request. Please, try again</p>\n      )}\n      {searchFilms && <MoviesList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nconst API_KEY = '39e7da294e936c33fd9232ae467a3749';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n  page: 1,\n  include_adult: false,\n};\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(`search/movie?query=${keyword}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`);\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits`);\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews`);\n  return response.data.results;\n};\n"],"names":["List","styled","Item","MovieLink","Link","films","location","useLocation","map","film","to","id","state","from","title","SearchForm","Input","Button","searchMovies","useState","query","setQuery","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","searchFilms","setSearchFilms","loading","setLoading","noMoviesText","setNoMoviesText","queryMovie","fetchSearchByKeyword","then","searchResults","length","catch","error","console","log","finally","Loader","MoviesList","axios","api_key","language","page","include_adult","fetchTrending","response","data","results","keyword","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}